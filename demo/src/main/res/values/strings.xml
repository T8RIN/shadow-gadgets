<resources>
    <string name="app_name">Shadow Gadgets Demo</string>

    <string name="welcome_header">Welcome to the\n<big><b><u>Shadow Gadgets Demo</u></b></big></string>
    <string name="welcome">• There are a handful of pages in a basic pager format navigable with the side arrows, or through the menu that pops up when clicking the title.\n\n• The descriptions at the bottom of each page are scrollable, but can also be long-clicked to open a dialog with the same text.\n\n• The shadows throughout this demo have been darkened quite a bit beyond normal, simply to make it easier to see what\'s happening. This was done by increasing the light source alphas in the relevant theme attributes, so that\'s where to look, if you\'d like to adjust them.\n\n• This demo was put together on 1080x1920 xxhdpi devices. Admittedly, several of the layouts were done \"by eye\", and so might have children that do not line up as intended on other configurations. Sorry if that\'s an inconvenience.</string>
    <string name="hide_welcome">Don\'t show this again.</string>

    <string name="description_intro">The round rectangle in the upper left frame is a plain <small><b><tt>&lt;View&gt;</tt></b></small> with a translucent background and adjustable elevation. It can be dragged and dropped between the two frames, as a simple demonstration of how the clipped shadow will automatically move to its target\'s new parent. (The drag shadow is a plain gray round rectangle, by the way, since we can\'t draw these shadows there.)\n\nThe \"Clip shadow\" switch is simply calling <small><b><tt>clipOutlineShadow = isChecked</tt></b></small> on the target <small><b><tt>View</tt></b></small>, and the radio buttons determine which item the color controls affect: the <small><b><tt>View</tt></b></small> itself, or its shadow.\n\nNote that shadow colors were not available on Android versions before Pie (API level 28), so that option will be disabled on those versions.\n\nThe \"\u0251\" slider controls the translucency (the alpha channel, part of the color), and the \"z\" slider is elevation.</string>
    <string name="description_motion">This page shows that the clipped shadows automatically animate and transform along with their targets, even though they\'re not intrinsic to them.\n\nThe top <small><b><tt>View</tt></b></small> can be swiped side to side in a <small><b><tt>MotionLayout</tt></b></small> that\'s also modifying its scale and rotation simultaneously.\n\nThe bottom half demonstrates some <small><b><tt>FloatingActionButton</tt></b></small>s and a <small><b><tt>Snackbar</tt></b></small> inside a <small><b><tt>CoordinatorLayout</tt></b></small>, showing how the shadows integrate well with standard animations.\n\nPlease note that the FAB animations might break if you swipe the <small><b><tt>MotionLayout</tt></b></small> while they\'re running, due to some weird interaction between it and the <small><b><tt>CoordinatorLayout</tt></b></small>. It\'s probably because the one is nested in the other, but I left it as is just for internal consistency, as I figured this didn\'t need to be too robust.</string>
    <string name="description_behavior">The library\'s main method involves disabling the target <small><b><tt>View</tt></b></small>\'s inherent shadow and drawing a clipped copy in its place, in the parent\'s overlay. This has the benefit of being externally applicable to any <small><b><tt>View</tt></b></small> without having to modify or subclass it or its parent.\n\nHowever, this means that these clipped shadows are drawn outside of the normal child routine, and can therefore cause a different kind artifact if a target is overlapped by a direct sibling. This is most evident in the lower setup, where the see-through blue <small><b><tt>View</tt></b></small>\'s clipped shadow would, by default, show on top of the red one that actually has a greater elevation.\n\nTo remedy this, blue\'s shadow can be directed to draw behind the parent\'s content instead of on top, hiding that section of clipped shadow.\n\nThe upper setup is a duplicate of the previous <small><b><tt>MotionLayout</tt></b></small>, but with an additional flat gray <small><b><tt>View</tt></b></small> on the right, to show that the clipped background shadow really is drawing behind everything.</string>
    <string name="description_irregular">Aside from the limitations inherent to the overlay technique, the other main issue is due to Android\'s continuing lockdown on reflection that started in Pie and has only gotten more restrictive since. Starting with R (API level 30), it is no longer possible to get at the <small><b><tt>Path</tt></b></small> object that describes irregular shapes; that is, shapes that are not circles, rectangles, or single-radius round rectangles. This means that even simple shapes like a square with one round corner cannot be fixed automatically.\n\nTo help with these situations, the library provides an interface and corresponding extension property through which you can set the appropriate <small><b><tt>Path</tt></b></small> for problematic shapes.\n\nAlso included is a concrete implementation of that interface that will allow the fix to work automatically with <small><b><tt>ViewGroup</tt></b></small>s that have a <small><b><tt>MaterialShapeDrawable</tt></b></small> background, as many of the standard library ones do.</string>
    <string name="description_application">The library also offers a few different ways to apply the fix, other than through direct use in code.\n\n• There are several customized subclasses of the common recycling <small><b><tt>ViewGroup</tt></b></small>s like <small><b><tt>RecyclerView</tt></b></small> and <small><b><tt>ListView</tt></b></small> that automatically enable the fix on each of their children, and thereafter handle the shadows\' attach/detach behavior more efficiently than would normally happen.\n\n• Most other common <small><b><tt>ViewGroup</tt></b></small>s also have available subclasses that will recognize and handle custom shadow attributes on children in layout XML, allowing you to keep it out of the code entirely. For example, the three FABs above on the right have their shadows fixed with an XML attribute, inside a <small><b><tt>&lt;ClippedShadowsConstraintLayout&gt;</tt></b></small>.\n\n• Lastly, there are inflation helpers that are designed to \"plug in\" to an <small><b><tt>Activity</tt></b></small>\'s layout inflation pipeline to look for the aforementioned attributes without using the custom subclasses, or to apply the fix to tags that match rules defined in code or XML. This is a somewhat niche tool that I don\'t foresee being of much use to others, so I don\'t really push it anymore, but it\'s still in the library, though all of its docs are only in the wiki.</string>
    <string name="description_drawable">A custom <small><b><tt>Drawable</tt></b></small> class is included as a convenient way to draw these shadows manually without to having to mess with the core module, but there are a few ways in which it does not act like a regular <small><b><tt>Drawable</tt></b></small> at all. The full details are in the README; this page demonstrates only the main caveat to note when using this.\n\nThough we\'re able to clip these shadows, they\'re still kind of happening in a completely separate draw that\'s behind all the stuff we\'re drawing ourselves with the SDK primitives. Because of that, it\'s possible to get a shadow out of sync with its clipped area, causing the artifacts to become visible out of bounds of the clip.\n\nIf you\'re doing anything more than relatively basic, static draws, extra care should be taken to ensure that the clip is invalidated when any relevant shadow properties are changed.</string>
    <string name="description_compose">This page contains a <small><b><tt>ComposeView</tt></b></small> showing a <small><b><tt>FloatingActionButton()</tt></b></small>, a regular <small><b><tt>Button()</tt></b></small>, and a specially shaped <small><b><tt>Card()</tt></b></small> with clipped shadows.\n\nThis is somewhat experimental at the moment, but the library now includes a Compose <small><b><tt>Modifier</tt></b></small>: <small><b><tt>clippedShadow()</tt></b></small>. It\'s used very similarly to plain <small><b><tt>shadow()</tt></b></small>, but there\'s no content clip option (since that can be handled easily with a separate extension), and it does <i>not</i> generate a new graphics layer/surface, as it is purely decorative.\n\nSince these shadows are drawn inline, there shouldn\'t really be any other complications beyond getting things lined up to begin with, as any transformations that Compose might apply for animations and whatnot will happen around the whole draw. As mentioned, though, this is experimental, so I would not be surprised if there are things I\'ve not yet thought of.</string>

    <string name="color_which"><u>Apply color to:</u></string>
</resources>